// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  email         String      @unique
  name          String?
  isAdmin       Boolean     @default(true)
  active        Boolean     @default(false)
  validateToken String?     @default(cuid())
  role          Role        @default(Author)
  products      Product[]
  username      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  promotions    Promotion[]
  avatar        String?
}

model Customer {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  email       String       @unique
  firstName   String?
  lastName    Boolean?     @default(false)
  gender      Gender?
  dateOfBirth DateTime?
  billingInfo BillingInfo?
  verified    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  avatar      String?
  orders      Order[]
}

model Product {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  price        Float
  newPrice     Float?
  isDiscounted Boolean   @default(false)
  discount     Float?
  image        String
  quantity     Int       @default(0)
  createdById  String?   @db.ObjectId
  createdBy    Admin?    @relation(fields: [createdById], references: [id], onDelete: SetNull)
  brandId      String?   @db.ObjectId
  brand        Brand?    @relation(fields: [brandId], references: [id], onDelete: SetNull)
  categoryId   String?   @db.ObjectId
  category     Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  gender       Gender?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isPublished  Boolean   @default(false)
  size         String?
  status       Status    @default(draft)
  order        Order?    @relation(fields: [orderId], references: [id])
  orderId      String?   @db.ObjectId
  sku          String?
  color        String?
  type         String?
}

model Order {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  customerId  String?   @db.ObjectId
  customer    Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  products    Product[]
  total       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isCompleted Boolean   @default(false)
  invoices    Invoice[]
}

model Invoice {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String?  @db.ObjectId
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  logo      String?
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Promotion {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  discount    Float
  code        String   @unique
  type        String
  startDate   DateTime @map("start_date")
  isActive    Boolean  @default(false)
  endDate     DateTime @map("end_date")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String?  @db.ObjectId
  createdBy   Admin?   @relation(fields: [createdById], references: [id], onDelete: SetNull)
}

enum Role {
  Author     @map("author")
  Editor     @map("editor")
  SuperAdmin @map("super-admin")
}

enum Status {
  draft     @map("draft")
  published @map("published")
  archived  @map("archived")
}

enum Gender {
  Male   @map("male")
  Female @map("female")
}

type BillingInfo {
  address    String
  city       String
  state      String
  postalCode String
  country    String
  cardNumber String
  expMonth   Int
  expYear    Int
  cvv        String
}
